idx <- dat$Ned1_Diff > boxstats$stats[1] & dat$Ned1_Diff < boxstats$stats[5]
outlier_Ned1_Diff <- which(idx==FALSE)
outlier_lgSUBTLEX
outlier_PTAN
outlier_Ned1_Diff
dat$PTAN > boxstats$stats[1] & dat$PTAN < boxstats$stats[5]
intersect(outlier_lgSUBTLEX,outlier_PTAN
)
intersect(outlier_lgSUBTLEX,outlier_PTAN)
dat$lgSUBTLEX > boxstats$stats[1] & dat$lgSUBTLEX < boxstats$stats[5]
rev(dat$lgSUBTLEX > boxstats$stats[1] & dat$lgSUBTLEX < boxstats$stats[5])
!(dat$lgSUBTLEX > boxstats$stats[1] & dat$lgSUBTLEX < boxstats$stats[5])
# Outlier rejection:
#lgSubtlex
boxstats <- boxplot.stats(dat$lgSUBTLEX)
idx <- !(dat$lgSUBTLEX > boxstats$stats[1] & dat$lgSUBTLEX < boxstats$stats[5])
idx
# Select only valid cases (e.g., Phono info available)
dat <- Merged[!is.na(Merged$PhoWord),]
# Outlier rejection:
#lgSubtlex
boxstats <- boxplot.stats(dat$lgSUBTLEX)
outlier_lgSUBTLEX <- !(dat$lgSUBTLEX > boxstats$stats[1] & dat$lgSUBTLEX < boxstats$stats[5])
#PTAN (neighbor metric: phonological, neighbor metric: all, neighborhood frequency: all, value: size)
boxstats <- boxplot.stats(dat$PTAN)
outlier_PTAN <- !(dat$PTAN > boxstats$stats[1] & dat$PTAN < boxstats$stats[5])
#ned1_diff (for associated Wuggy-pseudowords)
boxstats <- boxplot.stats(dat$Ned1_Diff)
outlier_Ned1_Diff <- !(dat$Ned1_Diff > boxstats$stats[1] & dat$Ned1_Diff < boxstats$stats[5])
rm(list=ls())
library(dplyr)
library(tidyr)
fileinput <- 'V:/spinco_data/Database_stimuli/Neuroling_stimuli.xlsx'
fileoutput <- 'V:/spinco_data/Database_stimuli/Neuroling_stimuli_excOutliers.xlsx'
# read
Merged <- openxlsx::read.xlsx(fileinput,sheet = 'Merged')
# Select only valid cases (e.g., Phono info available)
dat <- Merged[!is.na(Merged$PhoWord),]
# Outlier rejection:
#lgSubtlex
boxstats <- boxplot.stats(dat$lgSUBTLEX)
dat$outlier_lgSUBTLEX <- !(dat$lgSUBTLEX > boxstats$stats[1] & dat$lgSUBTLEX < boxstats$stats[5])
#PTAN (neighbor metric: phonological, neighbor metric: all, neighborhood frequency: all, value: size)
boxstats <- boxplot.stats(dat$PTAN)
dat$outlier_PTAN <- !(dat$PTAN > boxstats$stats[1] & dat$PTAN < boxstats$stats[5])
#ned1_diff (for associated Wuggy-pseudowords)
boxstats <- boxplot.stats(dat$Ned1_Diff)
dat$outlier_Ned1_Diff <- !(dat$Ned1_Diff > boxstats$stats[1] & dat$Ned1_Diff < boxstats$stats[5])
#Outlier in any
head(dat)
if_any(c(outlier_lgSUBTLEX,outlier_PTAN)==TRUE)
dplyr::if_any(c(outlier_lgSUBTLEX,outlier_PTAN)==TRUE)
dplyr::if_any(dat,c(outlier_lgSUBTLEX,outlier_PTAN)==TRUE)
if(dat$outlier_lgSUBTLEX==TRUE & dat$outlier_PTAN==TRUE)
()
if(dat$outlier_lgSUBTLEX==TRUE & dat$outlier_PTAN==TRUE)
if (dat$outlier_lgSUBTLEX==TRUE && dat$outlier_PTAN==TRUE)
if (dat$outlier_lgSUBTLEX==TRUE)
(dat$outlier_lgSUBTLEX==TRUE)
which (dat$outlier_lgSUBTLEX==TRUE && dat$outlier_PTAN==TRUE)
which (dat$outlier_lgSUBTLEX==TRUE & dat$outlier_PTAN==TRUE)
which (dat$outlier_lgSUBTLEX==TRUE & dat$outlier_PTAN==TRUE & dat$outlier_Ned1_Diff==TRUE)
head(dat)
which (dat$outlier_lgSUBTLEX==TRUE | dat$outlier_PTAN==TRUE | dat$outlier_Ned1_Diff==TRUE)
(dat$outlier_lgSUBTLEX==TRUE | dat$outlier_PTAN==TRUE | dat$outlier_Ned1_Diff==TRUE)
dat$outlier_any <-  (dat$outlier_lgSUBTLEX==TRUE | dat$outlier_PTAN==TRUE | dat$outlier_Ned1_Diff==TRUE)
Merged
dat
rm(list=ls())
library(dplyr)
library(tidyr)
fileinput <- 'V:/spinco_data/Database_stimuli/Neuroling_stimuli.xlsx'
fileoutput <- 'V:/spinco_data/Database_stimuli/Neuroling_stimuli_excOutliers.xlsx'
# read
Merged <- openxlsx::read.xlsx(fileinput,sheet = 'Merged')
# Outlier rejection:
#lgSubtlex
boxstats <- boxplot.stats(dat$lgSUBTLEX)
dat$outlier_lgSUBTLEX <- !(dat$lgSUBTLEX > boxstats$stats[1] & dat$lgSUBTLEX < boxstats$stats[5])
#PTAN (neighbor metric: phonological, neighbor metric: all, neighborhood frequency: all, value: size)
boxstats <- boxplot.stats(dat$PTAN)
dat$outlier_PTAN <- !(dat$PTAN > boxstats$stats[1] & dat$PTAN < boxstats$stats[5])
#ned1_diff (for associated Wuggy-pseudowords)
boxstats <- boxplot.stats(dat$Ned1_Diff)
dat$outlier_Ned1_Diff <- !(dat$Ned1_Diff > boxstats$stats[1] & dat$Ned1_Diff < boxstats$stats[5])
#Outlier in any
dat$outlier_any <-  (dat$outlier_lgSUBTLEX==TRUE | dat$outlier_PTAN==TRUE | dat$outlier_Ned1_Diff==TRUE)
rm(list=ls())
library(dplyr)
library(tidyr)
fileinput <- 'V:/spinco_data/Database_stimuli/Neuroling_stimuli.xlsx'
fileoutput <- 'V:/spinco_data/Database_stimuli/Neuroling_stimuli_excOutliers.xlsx'
# read
Merged <- openxlsx::read.xlsx(fileinput,sheet = 'Merged')
dat <- Merged
# Outlier rejection:
#lgSubtlex
boxstats <- boxplot.stats(dat$lgSUBTLEX)
dat$outlier_lgSUBTLEX <- !(dat$lgSUBTLEX > boxstats$stats[1] & dat$lgSUBTLEX < boxstats$stats[5])
#PTAN (neighbor metric: phonological, neighbor metric: all, neighborhood frequency: all, value: size)
boxstats <- boxplot.stats(dat$PTAN)
dat$outlier_PTAN <- !(dat$PTAN > boxstats$stats[1] & dat$PTAN < boxstats$stats[5])
#ned1_diff (for associated Wuggy-pseudowords)
boxstats <- boxplot.stats(dat$Ned1_Diff)
dat$outlier_Ned1_Diff <- !(dat$Ned1_Diff > boxstats$stats[1] & dat$Ned1_Diff < boxstats$stats[5])
#Outlier in any
dat$outlier_any <-  (dat$outlier_lgSUBTLEX==TRUE | dat$outlier_PTAN==TRUE | dat$outlier_Ned1_Diff==TRUE)
# Select only valid cases (e.g., Phono info available)
dat <- Merged[!is.na(Merged$PhoWord),]
rm(list=ls())
library(dplyr)
library(tidyr)
fileinput <- 'V:/spinco_data/Database_stimuli/Neuroling_stimuli.xlsx'
fileoutput <- 'V:/spinco_data/Database_stimuli/Neuroling_stimuli_excOutliers.xlsx'
# read
Merged <- openxlsx::read.xlsx(fileinput,sheet = 'Merged')
dat <- Merged
# Outlier rejection:
#lgSubtlex
boxstats <- boxplot.stats(dat$lgSUBTLEX)
dat$outlier_lgSUBTLEX <- !(dat$lgSUBTLEX > boxstats$stats[1] & dat$lgSUBTLEX < boxstats$stats[5])
#PTAN (neighbor metric: phonological, neighbor metric: all, neighborhood frequency: all, value: size)
boxstats <- boxplot.stats(dat$PTAN)
dat$outlier_PTAN <- !(dat$PTAN > boxstats$stats[1] & dat$PTAN < boxstats$stats[5])
#ned1_diff (for associated Wuggy-pseudowords)
boxstats <- boxplot.stats(dat$Ned1_Diff)
dat$outlier_Ned1_Diff <- !(dat$Ned1_Diff > boxstats$stats[1] & dat$Ned1_Diff < boxstats$stats[5])
#Outlier in any
dat$outlier_any <-  (dat$outlier_lgSUBTLEX==TRUE | dat$outlier_PTAN==TRUE | dat$outlier_Ned1_Diff==TRUE)
rm(list=ls())
library(dplyr)
library(tidyr)
fileinput <- 'V:/spinco_data/Database_stimuli/Neuroling_stimuli.xlsx'
fileoutput <- 'V:/spinco_data/Database_stimuli/Neuroling_stimuli_excOutliers.xlsx'
# read
Merged <- openxlsx::read.xlsx(fileinput,sheet = 'Merged')
dat <- Merged
# Outlier rejection:
#lgSubtlex
boxstats <- boxplot.stats(dat$lgSUBTLEX)
dat$outlier_lgSUBTLEX <- !(dat$lgSUBTLEX > boxstats$stats[1] & dat$lgSUBTLEX < boxstats$stats[5])
#PTAN (neighbor metric: phonological, neighbor metric: all, neighborhood frequency: all, value: size)
boxstats <- boxplot.stats(dat$PTAN)
dat$outlier_PTAN <- !(dat$PTAN > boxstats$stats[1] & dat$PTAN < boxstats$stats[5])
#ned1_diff (for associated Wuggy-pseudowords)
boxstats <- boxplot.stats(dat$Ned1_Diff)
dat$outlier_Ned1_Diff <- !(dat$Ned1_Diff > boxstats$stats[1] & dat$Ned1_Diff < boxstats$stats[5])
#Outlier in any
dat$outlier_any <-  (dat$outlier_lgSUBTLEX==TRUE | dat$outlier_PTAN==TRUE | dat$outlier_Ned1_Diff==TRUE)
openxlsx::write.xlsx(fileinput,sheet = 'Merged2')
rm(list=ls())
library(dplyr)
library(tidyr)
fileinput <- 'V:/spinco_data/Database_stimuli/Neuroling_stimuli.xlsx'
fileoutput <- 'V:/spinco_data/Database_stimuli/Neuroling_stimuli_excOutliers.xlsx'
# read
Merged <- openxlsx::read.xlsx(fileinput,sheet = 'Merged')
dat <- Merged
# Outlier rejection:
#lgSubtlex
boxstats <- boxplot.stats(dat$lgSUBTLEX)
dat$outlier_lgSUBTLEX <- !(dat$lgSUBTLEX > boxstats$stats[1] & dat$lgSUBTLEX < boxstats$stats[5])
#PTAN (neighbor metric: phonological, neighbor metric: all, neighborhood frequency: all, value: size)
boxstats <- boxplot.stats(dat$PTAN)
dat$outlier_PTAN <- !(dat$PTAN > boxstats$stats[1] & dat$PTAN < boxstats$stats[5])
#ned1_diff (for associated Wuggy-pseudowords)
boxstats <- boxplot.stats(dat$Ned1_Diff)
dat$outlier_Ned1_Diff <- !(dat$Ned1_Diff > boxstats$stats[1] & dat$Ned1_Diff < boxstats$stats[5])
#Outlier in any
dat$outlier_any <-  (dat$outlier_lgSUBTLEX==TRUE | dat$outlier_PTAN==TRUE | dat$outlier_Ned1_Diff==TRUE)
openxlsx::write.xlsx(dat,fileoutput)
rm(list=ls())
library(dplyr)
library(tidyr)
fileinput <- 'V:/spinco_data/Database_stimuli/Neuroling_stimuli.xlsx'
fileoutput <- 'V:/spinco_data/Database_stimuli/tmp_markOutliers.xlsx'
# read
Merged <- openxlsx::read.xlsx(fileinput,sheet = 'Merged')
dat <- Merged
# Outlier rejection:
#lgSubtlex
boxstats <- boxplot.stats(dat$lgSUBTLEX)
dat$outlier_lgSUBTLEX <- !(dat$lgSUBTLEX > boxstats$stats[1] & dat$lgSUBTLEX < boxstats$stats[5])
#PTAN (neighbor metric: phonological, neighbor metric: all, neighborhood frequency: all, value: size)
boxstats <- boxplot.stats(dat$PTAN)
dat$outlier_PTAN <- !(dat$PTAN > boxstats$stats[1] & dat$PTAN < boxstats$stats[5])
#ned1_diff (for associated Wuggy-pseudowords)
boxstats <- boxplot.stats(dat$Ned1_Diff)
dat$outlier_Ned1_Diff <- !(dat$Ned1_Diff > boxstats$stats[1] & dat$Ned1_Diff < boxstats$stats[5])
#Outlier in any
dat$outlier_any <-  (dat$outlier_lgSUBTLEX==TRUE | dat$outlier_PTAN==TRUE | dat$outlier_Ned1_Diff==TRUE)
openxlsx::write.xlsx(dat,fileoutput)
dat
dat[dat$outlier_any]
dat$outlier_any
dat[!dat$outlier_any,]
x <- dat[!dat$outlier_any,]
dat$outlier_any
dat$outlier_any==FALSE
dat[which(dat$outlier_any==FALSE),]
##################################################
# Export a selection for matching
dat2export <- dat[which(dat$outlier_any==FALSE),]
colnames(dat2export)
head(dat2export)
select(dat2export,c('lgSUBTLEX','PTAN','Ned1_Diff','Length_Ortho'))
##################################################
# Export a selection for matching
dat2export <- dat[which(dat$outlier_any==FALSE),]
dat2export <- select(dat2export,c('Word','lgSUBTLEX','PTAN','Ned1_Diff','Length_Ortho'))
dat2export$CORRECT_SPELL
dat2export <- select(dat2export,c('CORRECT_SPELL','lgSUBTLEX','PTAN','Ned1_Diff','Length_Ortho'))
##################################################
# Export a selection for matching
dat2export <- dat[which(dat$outlier_any==FALSE),]
dat2export <- select(dat2export,c('CORRECT_SPELL','lgSUBTLEX','PTAN','Ned1_Diff','Length_Ortho'))
dat2export
head(dat2export )
write.csv(dat2export,'list2match,txt',colnames=FALSE,row.names = FALSE,sep = '\t')
write.csv(dat2export,'list2match,txt',colnames=FALSE,row.names = FALSE,sep = 't')
write.table(dat2export,'list2match,txt',colnames=FALSE,row.names = FALSE,sep = '\t')
write.table(dat2export,'list2match.txt',colnames=FALSE,row.names = FALSE,sep = '\t')
write.csv(dat2export,'list2match.txt',colnames=FALSE,row.names = FALSE,sep = '\t')
write.csv(dat2export,'list2match.txt',colnames=FALSE,row.names = FALSE,sep = ' ')
write.csv(dat2export,'list2match.txt',colnames=FALSE,row.names = FALSE,sep = "\t")
write.table(dat2export,'list2match.txt',colnames=FALSE,row.names = FALSE,sep = "\t")
write.table(dat2export,'list2match.txt',col.names=FALSE,row.names = FALSE,sep = "\t")
setwd()
getwd()
getwd()
---
title: "Resources"
child <- openxlsx::read.xlsx("C:/Users/gfraga/Desktop/childtest.txt")
child <- openxlsx::read.xlsx("C:/Users/gfraga/Desktop/children.xlsx")
child
child$title
paste0('## ',child$title[1])
length(child)
child$title
knitr::opts_chunk$set(echo = TRUE)
child <- openxlsx::read.xlsx("C:/Users/gfraga/Desktop/children.xlsx")
```{r, echo=FALSE, results='asis'}
names(child)
child$title
res
res <- lapply(child$title, function(x) {
knitr::knit_child(text = c(
'## `r x`',   ''
), envir = environment(), quiet = TRUE)
})
res
child
cat(unlist(titles), sep = '\n')
lapply(child, function(x) {paste0('## `r x')})
lapply(child, function(x) {paste0('## `r x`')})
lapply(child, function(x) {paste0('## `r x`')})
c('## `r `')
paste0('## `r',child$title[1],' `')
paste0('## `r ',child$title[1],' `')
child$title[i]
nrow(child)
child$title[1]
child$title[i]
i <- 1
child
lapply(child,function(x){paste0(child$title[x],child$content[x])})
paste0(child$title,child$content
)
paste0(child$title,child$content)
child <- openxlsx::read.xlsx("C:/Users/gfraga/Desktop/children.xlsx")
child_merged <- paste(child$title,'\n ',child$content)a
child <- openxlsx::read.xlsx("C:/Users/gfraga/Desktop/children.xlsx")
child_merged <- paste(child$title,'\n ',child$content)
child_merged
child_merged
as.data.frame(child_merged)
df$t    df <- as.data.frame(paste(child$title,'\n ',child$content))
df
df <- as.data.frame(paste(child$title,'\n ',child$content))
df
colnames(df)[1] <-'text'+
colnames(df)[1] <-'text'
df
```{r, echo=FALSE, results='asis'}
cat(df$text)
child
df
child
str(child)
str(df)
child <- openxlsx::read.xlsx("Table_vacancies.xlsx")
child
child
child
child$Title
child$Content
child <- openxlsx::read.xlsx("Table_vacancies.xlsx")
child$Content
res
# Generate child
res <- lapply(df$text, function(x) {
knitr::knit_child(text = c(
'## `r x`'
), envir = environment(), quiet = TRUE)
})
colnames(df)[1] <-'text'
df
# combine info from both columns
df <- as.data.frame(paste(child$title,'\n ',child$content))
df
# Generate child
res <- lapply(df$Content, function(x) {
knitr::knit_child(text = c(
'### `r x`'
), envir = environment(), quiet = TRUE)
})
child$Titleres
res
child <- openxlsx::read.xlsx("Table_vacancies.xlsx")
# combine info from both columns
df <- as.data.frame(paste(child$Title,'\n ',child$Content))
df
# combine info from both columns
df <- as.data.frame(paste(child$Title,'\n ',child$Content))
df
df$`paste(child$Title, "\n ", child$Content)`
res
cat(unlist('### \n',res), sep = '\n')
res
# Generate child
res <- lapply(df$text, function(x) {
knitr::knit_child(text = c(
'### `r x`'
), envir = environment(), quiet = TRUE)
})
res
df
df$text
# combine info from both columns
df <- as.data.frame(paste(child$Title,'\n ',child$Content))
colnames(df)[1] <-'text'
df$text
paste0('df$text
paste0('\n ', df$text)
cat(unlist(res), sep = '\n')
res
unlist(res)
# combine info from both columns
df <- as.data.frame(paste(child$Title,'\n ',child$Content))
df
child
child$Content
df
child
length(child)
dim(child)
nrow(child)
child <- openxlsx::read.xlsx("Table_vacancies.xlsx")
child <- openxlsx::read.xlsx("Table_vacancies.xlsx")
nrow(child)
for (ch in 1:nrow(child)){
df <- as.data.frame(paste(child$Title[ch],'\n ',child$Content[ch],'\n','---'))
}
df
# combine info from both columns as a single text, for each row
df <- c()
for (ch in 1:nrow(child)){
df <- c(df,as.data.frame(paste(child$Title[ch],'\n ',child$Content[ch],'\n','---')))
}
df
rbind(df)
do.call(rbind,df)
df
child <- openxlsx::read.xlsx("Table_vacancies.xlsx")
# combine info from both columns as a single text, for each row
df <- c()
for (ch in 1:nrow(child)){
df <- c(df,as.data.frame(paste(child$Title[ch],'\n ',child$Content[ch],'\n','---')))
}
df <- do.call(rbind,df)
df
colnames(df)
colnames(df) <-'text'
df
colnames(df)  <-'text'
# Generate child
res <- lapply(df$text, function(x) {
knitr::knit_child(text = c(
'### `r x`'
), envir = environment(), quiet = TRUE)
})
df <- as.data.frame(do.call(rbind,df))
# Generate child
res <- lapply(df, function(x) {
knitr::knit_child(text = c(
'### `r x`'
), envir = environment(), quiet = TRUE)
})
df
child <- openxlsx::read.xlsx("Table_vacancies.xlsx")
# combine info from both columns as a single text, for each row
df <- c()
for (ch in 1:nrow(child)){
df <- c(df,as.data.frame(paste(child$Title[ch],'\n ',child$Content[ch],'\n','---')))
}
colnames(df)  <-'Text'
df
str(df)
# Generate child
res <- lapply(df, function(x) {
knitr::knit_child(text = c(
'### `r x`'
), envir = environment(), quiet = TRUE)
})
child <- openxlsx::read.xlsx("Table_vacancies.xlsx")
# combine info from both columns
df <- as.data.frame(paste(child$Title,'\n ',child$Content,'\n','\n -----'))
df$`paste(child$Title, "\n ", child$Content, "\n", "\n -----")`
df
child
readxl::read_excel("Table_vacancies.xlsx")
child <- readxl::read_excel("Table_vacancies.xlsx")
children
child$Content
child$Content[1]
rtxt = child$Content[1]
rtxt
install.packages(rtf)
install.packages('rtf')
library(rtf)
install.packages('rtf2md')
install.packages("rtf2md")
devtools::install_github("gaborcsardi/rtf2md")
child = readxl::read_excel("Table_vacancies.xlsx")
stringr::str_replace_all(child$Title, "(\\*\\*|<b>)", "**")
print(stringr::str_replace_all(child$Title, "(\\*\\*|<b>)", "**"))
stringr::str_replace_all(child$Title, "(\\*\\*|<b>)", "**")
child <- openxlsx::read.xlsx("Table_vacancies.xlsx", format='text')
child <- openxlsx::read.xlsx("Table_vacancies.xlsx", format="text")
child <- openxlsx::read.xlsx("Table_vacancies.xlsx")
child$Title
install.packages(tidyxl )
install.packages('tidyxl')
library(tidyxl)
tidyxl::xlsx_cells("Table_vacancies.xlsx")
install.packages('readtext')
library('readtext')
readtext::readtext("Table_vacancies.xlsx")
child = readtext::readtext("Table_vacancies.xlsx")
child$Content
xlsx:::read.xlsx('Table_vacancies.xlsx')
tidy_xlsx:::xls_cell("Table_vacancies.xlsx")
tidyxl:::xls_cell("Table_vacancies.xlsx")
tidyxl:::xls_cells("Table_vacancies.xlsx")
tidyxl:::xlsx_cells("Table_vacancies.xlsx")
child = tidyxl:::xlsx_cells("Table_vacancies.xlsx")
child$row
child[3,]
child[3:nrows(child),]
child[3:nrow(child),]
child[2:nrow(child),]
child[3:nrow(child),]
child[3:nrow(child),]$col==1
child[which(child$col==1),[]
child[which(child$col==1),]
child[which(child$col==1) & which(child$row>1),]
child[which(child$col==1) & which(child$row !=1),]
child[which(child$col==1 & child$row !=1),]
titles = child[which(child$col==1 & child$row !=1),]
titles = child[which(child$col==1 & child$row !=1),]
titles
titles$character
titles$character_formatted
install.packages('textreadr')
readtext::readtext("Table_vacancies.xlsx")
txt = readtext::readtext("Table_vacancies.xlsx")
txt$text
txt$Content
txt
read.table("Table_vacancies.xlsx")
read.table("Table_vacancies.xlsx")
child <- openxlsx::read.xlsx("Table_vacancies.xlsx")
child <- openxlsx::read.xlsx("Table_vacancies_xml.xlsx")
child
xml2::read_xml("Table_vacancies_xml.xlsx")
install.packages("XML")
XML::xmlParse("Table_vacancies_xml.xlsx")
install.packages('officer')
officer::read_docx("Table_vacancies.doc")
officer::read_docx("Table_vacancies.docx")
install.packages('officer')
library('officer')
doc <- officer::read_docx("Table_vacancies.docx")
# Extract the table from the document
table <- body_add_table(doc)
library('officer')
doc <- officer::read_docx("Table_vacancies.docx")
# Extract the table from the document
table <- body_add_table(doc)
doc
striprtf::read_rtf('Vacancies.rtf')
install.packages(pandoc)
install.packages('pandoc')
library('pandoc')
pandoc_convert("vacancies.docx", to = "html")
pandoc_convert("vacancies.docx", to = "markdown")
pandoc_convert("vacancies.docx", to = "markdown", verbose = TRUE)
pandoc_convert("vacancies.docx", to = "markdown")
pandoc_convert("vacancies.docx", to = "LaTex")
pandoc_convert("vacancies.docx", to = "LaTeX")
pandoc_convert("vacancies.docx", to = "markdown")
install.packages('trackdown')
